#!/usr/bin/env bash

# This script will push specified local changes to the specified remote branch on GitHub.
# It always tries to pull from specified branch and push to specified branch no matter what local branch youre on
# It is safe to run multiple times if errors occur as it will prompt before changing something important.
# It takes two arguments:
#   path: path to the file or directory you want to 'git add'
#   message: a string representing the commit message (ie. "fixed some bug")
# You must execute this script from a local git repository
# Complete Usage: 
#   (on Unix or in git-bash)
#   ./git-push <path> "<message>" <remote-branch-name? = 'main'>
# 

# First time setup using git-push
# Commands:
# Unix:
#     cd <path-on-your-computer>
#     curl https://raw.githubusercontent.com/mzamora1/CSE-360-Team-Project/main/git-push | bash -s -- --init-gpg
 
# Windows:
#     (in cmd or Powershell)
#     start "C:\ProgramFiles\Git\git-bash.exe"
#     (now use Unix command above inside git-bash)
# 
# First time setup will not push anything to GitHub. It will only walk you through configuring
# git so that you can then push to GitHub manually or by rerunning this script with 
# the correct arguments. It will also help set up commit verification using gpg.


# Git settings
# name of GitHub repository
REPO_NAME="CSE-360-Team-Project"
# url to remote git repository
CORRECT_ORIGIN="https://github.com/mzamora1/$REPO_NAME.git"
# default branch to pull and push to
DEFAULT_BRANCH=main
askYesNo() {
    printf "$1\n(yes/no): "
    read CHOICE <&1
    case $CHOICE in 
        yes | y | Y | YES | 1) 
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}
ok() { 
    [ $? -eq 0 ]
    return $?
}
yellow() { printf "\e[1;33m$*\e[0m"; }
warning() { printf "$( yellow "WARNING" ): $*\n"; }
green() { printf "\e[1;32m$*\e[0m"; }
success() { printf "$( green "SUCCESS" ): $*\n"; }
red() { printf "\e[1;31m$*\e[0m"; }
error() {
    printf "$( red "ERROR" ): $*\n"
    return 1
}
fatalError() { error "$*" ; exit 1 ; }
CWD=$( pwd )
if ! [ -d "$CWD/.git" ]; then
    askYesNo "$( warning "current working directory does not point to a local git repository\nDo you want to clone the repository into its own folder in this directory?" )"
    ok || fatalError "rerun in a local git repository"
    git clone $CORRECT_ORIGIN || fatalError "could not clone repository"
    success "cloned $REPO_NAME to '$CWD/$REPO_NAME'"
    echo "Use 'cd $REPO_NAME' to work in the local repository."
    cd "$REPO_NAME"
fi


source settings.sh
assertHasCommands git

USAGE="$( purple "Usage" ): ./git-push <path> \"<message>\" <remote-branch-name? = 'main'>\n\tpath: single path to files you want to 'git add'\n\tmessage: string representing commit message (must include \"\" if multiworded)\n\tremote-branch-name: name of branch to push to (optional, defaults to main branch)\n"

REMOTE_BRANCH=$( [ -n "$3" ] && echo "$3" || echo $DEFAULT_BRANCH )
LOCAL_BRANCH=$( git branch --show-current )
NAME=$( git config --get user.name )
EMAIL=$( git config --get user.email )
SIGNING_KEY=$( git config --get user.signingkey )
ORIGIN=$( git config --get remote.origin.url )

if ! ok; then
    echo "$( yellow 'adding remote origin' ): $CORRECT_ORIGIN"
    git remote add origin "$CORRECT_ORIGIN"
elif [ "$ORIGIN" != "$CORRECT_ORIGIN" ]; then
    askYesNo "$( warning "Your remote origin does not point to $REPO_NAME\nDo you want to set it back to deafult ($CORRECT_ORIGIN)?" )"
    if ok; then 
        git remote set-url origin "$CORRECT_ORIGIN"
        echo "$( yellow 'set remote origin' ): $CORRECT_ORIGIN"
    else echo "ok continuing..."
    fi
fi


set_config() {
    git config --global "$1" "$2"
    echo "$( yellow "set '$1'" ): $2"
}
if [ -z "$NAME" ]; then
    read -p "Enter your first and last name. ex. 'John Smith' (used in commit msg): " NAME <&1
    set_config user.name "$NAME"
fi

if [ -z "$EMAIL" ]; then
    read -p "Enter your GitHub no-reply email (used in commit msg): " EMAIL <&1
    set_config user.email "$EMAIL"
fi

if [ "$LOCAL_BRANCH" != "$REMOTE_BRANCH" ]; then
    askYesNo "$( warning "you're about to push to remote branch '$REMOTE_BRANCH' while working on local branch: '$LOCAL_BRANCH'\nDo you want to change local branch to '$REMOTE_BRANCH'? No will continue executing")"
    if ok; then
        LOCAL_BRANCH="$REMOTE_BRANCH"
        git fetch origin
        git checkout -b "$LOCAL_BRANCH" "origin/$REMOTE_BRANCH"
        ok || fatalError "failed to checkout '$REMOTE_BRANCH', see output above"
        echo "$( yellow "switched local branch" ) to '$REMOTE_BRANCH'"
    fi
    echo "ok continuing..."
elif [ -z "$( git branch -r | grep -F "origin/$REMOTE_BRANCH" )" ]; then 
    fatalError "cannot find remote branch 'origin/$REMOTE_BRANCH'\n" \
    "Use 'git fetch origin' and rerun if you think this is incorrect"
fi

export GPG_TTY=$(tty)

extract_keys() { gpg --list-keys --keyid-format LONG $@; }
extract_keyid() {
    extract_keys $@ | grep "^pub\|^sec" | cut -d'/' -f 2 | cut -d' ' -f 1
}
extract_keyalgo() {
    extract_keys $@ | grep "^pub\|^sec" | cut -d'/' -f 1 | cut -d' ' -f 4
}
set_signingkey() {
    set_config user.signingkey $1
    set_config commit.gpgsign 'true'
}

init_gpg() {
    assertHasCommands gpg "If its NOT installed, rerun without '--init-gpg' flag" 
    extract_keys | grep "$NAME.\+$EMAIL" > /dev/null 2>&1
    if ok; then
        warning "already created gpg key for '$NAME' <$EMAIL>\nDo you want to..."
        PS3="Enter a number above: "
        SIGNING_KEY=$( extract_keyid "$NAME" "$EMAIL" )
        select CHOICE in "use key id: $SIGNING_KEY" "make another key" "quit and exit"; do
            case $CHOICE in
                "use key id: $SIGNING_KEY")
                    if [ "$( extract_keyalgo $SIGNING_KEY )" != "rsa4096" ]; then
                        askYesNo "$( warning "key id($SIGNING_KEY) does not use default algo 'rsa4096' so it may not work correctly with github.\nDo you still want to set it as your signing key?" )"
                        ok || fatalError "rerun with '--init-gpg' to make a new key"
                    fi
                    set_signingkey $SIGNING_KEY
                    exit 0
                    ;;
                "make another key")
                    echo "ok continuing..."
                    ;;
                *)
                    error "rerun without '--init-gpg' flag"
                    exit 0
                    ;;
            esac
            break
        done
    fi
    echo "Configuring a new gpg key..."
    read -p "Enter a passphrase for this key that you will remember: " PASSPHRASE <&1
    COMMENT="Gen by git-push on $( date )"
    gpg --default-new-key-algo rsa4096 --gen-key --batch <<GPGConfig
%echo Creating gpg key...
Key-Type: 1
Key-Length: 4096
Subkey-Type: 1
Subkey-Length: 4096
Name-Real: $NAME
Name-Comment: $COMMENT
Name-Email: $EMAIL
Expire-Date: 0
Passphrase: $PASSPHRASE
%commit
%echo Finished creating key.
GPGConfig
    ok || fatalError "could not generate keys, see output above.\n" \
    "gpg is optional, so if this is too much of a pain then dont include '--init-gpg' argument."
    SIGNING_KEY=$( extract_keyid "$COMMENT" )
    printf "\n$( purple "Public GPG Key" ): \n\n"
    gpg --armor --export $SIGNING_KEY
    printf "\n\n$( purple Instructions ):\n\t1. Sign into GitHub.com\n\t2. Go to your profile settings and find where it says 'GPG keys'\n\t3. Click 'New GPG key'\n\t4. Copy the whole block of text above from ---BEGIN--- to ---END--- into the prompt and add key.\n\t5. Once done, press ENTER to continue\n"
    read CHOICE <&1
    set_signingkey $SIGNING_KEY
    echo "To stop using verified commits use 'git config --global commit.gpgsign 'false''"
    success "configured git and gpg. Use 'cd $REPO_NAME' and start making verified commits!"
    echo "$USAGE"
    exit 0
}


if [ "$1" == "--init-gpg" ]; then
    init_gpg
fi

# end of setup


if [ "$(git config --get commit.gpgsign )" == "true" ]; then
    extract_keys $SIGNING_KEY | grep "$NAME.\+$EMAIL" > /dev/null 2>&1
    ok || fatalError "Current user (name: '$NAME', email: '$EMAIL') does not match current signing key-id (signingkey: $SIGNING_KEY)\n" \
    "Change git user configuration or create a new key for this user using './git-push --init-gpg'\n" \
    "If errors still occur after making a new key then disable verified commits with 
    'git config --global commit.gpgsign 'false''"
fi


[ $# -gt 3 ] || [ $# -lt 2 ] && fatalError "incorrect usage\n" "$USAGE"

[ -z "$2" ] && fatalError "commit message must not be empty"


git pull origin "$REMOTE_BRANCH"
ok || fatalError "could be from conflicting merge between main branch and local repository\n" \
"Solution: use 'git mergetool' or 'git diff' to find and correct each merge conflict.\n" \
"Solution: if you want to overwrite all local conflicts with remote state use 'git pull --force origin main\n" \
"Solution: if you want to overwrite all remote conflicts with local state use 'git add . && git commit -m \"message\" && git push origin main'\n" \
"Solution: use 'git fetch origin' if can't find remote branch"
success "fetched and merged main branch"

git add "$1" && success "added '$1'" && \
git commit -m "$2" && success "commited '$2'" && \
git push origin "$LOCAL_BRANCH:$REMOTE_BRANCH" && success "pushed to '$REMOTE_BRANCH'" || error "failed to push to '$REMOTE_BRANCH', see output above"

exit $?