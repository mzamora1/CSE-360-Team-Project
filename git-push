#!/usr/bin/env bash

# This script will push specified local changes to GitHub.
# It always tries to pull from origin/main and push to origin/main no matter what local branch youre on
# It takes two arguments:
#   path: path to the file or directory you want to 'git add'
#   message: a string representing the commit message (ie. "fixed some bug")
# You must execute this script from a local git repository
# Complete Usage: 
#   (on Unix or in git-bash)
#   ./git-push <path> "<message>"
# 

# First time setup using git-push
# Commands:
# Unix:
#     cd <path-on-your-computer>
#     curl https://raw.githubusercontent.com/mzamora1/CSE-360-Team-Project/main/git-push | bash -s -- --init-gpg
 
# Windows:
#     (in cmd or Powershell)
#     start "C:\ProgramFiles\Git\git-bash.exe"
#     (now use Unix command above inside git-bash)
# 
# First time setup will not push anything to GitHub. It will only walk you through configuring
# git so that you can then push to GitHub manually or by rerunning this script with 
# the correct arguments. It will also help set up commit verification using gpg.


red() { printf "\e[1;31m$1\e[0m"; }
green() { printf "\e[1;32m$1\e[0m"; }
yellow() { printf "\e[1;33m$1\e[0m"; }
purple() { printf "\e[1;35m$1\e[0m"; }
warning() { printf "$( yellow "WARNING" ): $1\n"; }
success() { printf "$( green "SUCCESS" ): $1\n"; }
error() {
    printf "$( red "ERROR" ): $1\n"
    return 1
}
askYesNo() {
    read -p "$1 (yes/no): " CHOICE <&1
    case $CHOICE in 
        yes | y | Y | YES | 1) 
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

assert() {
    # echo $1
    if ! [ $1 ]; then
        error "$2"
        until [ -z "$3" ]; do  # Until all parameters used up . . .
            echo "$3"
            shift
        done
        exit 1
    fi
}

REPO_NAME="CSE-360-Team-Project"
USAGE="$( purple "Usage" ): ./git-push <path> \"<message>\""
CORRECT_ORIGIN="https://github.com/mzamora1/$REPO_NAME.git"
CWD=$( pwd )

if ! [ -d "$CWD/.git" ]; then
    askYesNo "$( warning "current working directory does not point to a local git repository\nDo you want to clone the repository into its own folder in this directory?" )"
    assert "$? -eq 0" "rerun in a local git repository"
    git clone $CORRECT_ORIGIN
    success "cloned $REPO_NAME to '$CWD/$REPO_NAME'"
    echo "Use 'cd $REPO_NAME' to work in the local repository."
    cd "$REPO_NAME"
fi

ORIGIN=$( git config --get remote.origin.url )
NAME=$( git config --get user.name )
EMAIL=$( git config --get user.email )
SIGNING_KEY=$( git config --get user.signingkey )
LOCAL_BRANCH=$( git branch --show-current )


if [ -z "$ORIGIN" ]; then
    echo "$( yellow 'adding remote origin' ): $CORRECT_ORIGIN"
    git remote add origin $CORRECT_ORIGIN
elif [ $ORIGIN != $CORRECT_ORIGIN ]; then
    echo "$( yellow 'setting remote origin' ): $CORRECT_ORIGIN"
    git remote set-url origin $CORRECT_ORIGIN
fi

if [ -z "$NAME" ]; then
    read -p "Enter your first and last name. ex. 'John Smith' (used in commit msg): " NAME <&1
    git config --global user.name "$NAME"
fi

if [ -z "$EMAIL" ]; then
    read -p "Enter your GitHub no-reply email (used in commit msg): " EMAIL <&1
    git config --global user.email "$EMAIL"
fi

if [ -z "$LOCAL_BRANCH" ]; then
    echo "$( yellow 'checking out main branch' ): Local branch: main, Remote branch: origin/main"
    LOCAL_BRANCH="main"
    git fetch --all
    git checkout -b "$LOCAL_BRANCH" origin/main
elif [ "$LOCAL_BRANCH" != "main" ]; then
    askYesNo "$( warning "you're about to push to the main branch while working on local branch: '$LOCAL_BRANCH'\nAre you sure this is correct?")"
    assert "$? -eq 0" "aborted. Use 'git checkout main' to switch to the main branch"
    echo "ok continuing..."
fi

export GPG_TTY=$(tty)
if [ "$1" == "--init-gpg" ]; then
    GPG_VERSION_INFO=$( gpg --version )
    assert "$? -eq 0" "could not find gpg" "If its not installed, rerun without '--init-gpg' flag" \
    "If it is installed, make sure it is added to your \$PATH"
    KEY_MATCH=$( gpg --list-keys --keyid-format LONG "Gen by git-push" | grep "$NAME.\+$EMAIL" )
    if [ -n "$KEY_MATCH" ]; then
        askYesNo "$( warning "already created gpg key for '$NAME' <$EMAIL>\nDo you really want to make another one?" )"
        assert "$? -eq 0" "rerun without '--init-gpg' flag"
        echo "ok continuing..."
    fi
    echo "Begin gpg configuration..."
    read -p "Enter a passphrase for this gpg key that you will remember: " PASSPHRASE <&1
    COMMENT="Gen by git-push on $( date )"
    gpg --default-new-key-algo rsa4096 --gen-key --batch <<eoGpgConf
        %echo Started!
        Key-Type: 1
        Key-Length: 4096
        Subkey-Type: 1
        Subkey-Length: 4096
        Name-Real: $NAME
        Name-Comment: $COMMENT
        Name-Email: $EMAIL
        Expire-Date: 0
        Passphrase: $PASSPHRASE
        %commit
        %echo Done.
eoGpgConf
    assert "$? -eq 0" "could not generate keys, see output above." \
    "gpg is optional, so if this is too much of a pain then dont include '--init-gpg' argument."
    SIGNING_KEY=$( gpg --list-keys --keyid-format LONG "$COMMENT" | grep "^pub\|sec" | cut -d'/' -f 2 | cut -d' ' -f 1 )
    printf "\n$( purple "Public GPG Key" ): \n\n"
    gpg --armor --export $SIGNING_KEY
    printf "\n\n$( purple Instructions ):\n\t1. Sign into GitHub.com\n\t2. Go to your profile settings and find where it says 'GPG keys'\n\t3. Click 'New GPG key'\n\t4. Copy the whole block of text above from ---BEGIN--- to ---end--- into the prompt and add key.\n\t5. Once done, press ENTER to continue\n"
    read CHOICE <&1
    git config --global user.signingkey $SIGNING_KEY
    git config --global commit.gpgsign 'true'
    echo "$( yellow 'set global user signing key' ): $SIGNING_KEY"
    success "configured git and gpg. Use 'cd $REPO_NAME' to start working."
    exit 0
fi

# end of setup


if [ -n "$SIGNING_KEY" ] && [ "$(git config --get commit.gpgsign )" == "true" ]; then
    KEY_MATCH=$( gpg --list-keys --keyid-format LONG $SIGNING_KEY | grep "$NAME.\+$EMAIL" )
    if [ -z "$KEY_MATCH" ]; then
        error "Current user (name: '$NAME', email: '$EMAIL') does not match current signing key-id (signingkey: $SIGNING_KEY)"
        echo "Change git user configuration or create a new key for this user using './git-push --init-gpg'"
        exit 1
    fi
fi

assert "$# -ge 2" "must supply path to pass to git add and a commit message" "$USAGE"

if [ -z "$2" ]; then 
    error "commit message must not be empty"
    exit 1
fi


git pull origin main
assert "$? -eq 0" "could be from conflicting merge between main branch and local repository" \
"Solution: use 'git mergetool' or 'git diff' to find and correct all merge conflicts." \
"Solution: if you want to overwrite local conflicts with remote state use 'git pull --force origin main'" \
"Solution: if you want to overwrite remote conflicts with local state use 'git add . && git commit -m \"message\" && git push origin main'" \
"Solution: Google how to resolve git merge conflicts"
success "fetched and merged main branch"

git add "$1" && success "added '$1'" && \
git commit -m  "$2" --verbose && success "commited '$2'" && \
git push origin "$LOCAL_BRANCH:main" && success "pushed to main branch" || error "failed to push to main branch, see output above"

